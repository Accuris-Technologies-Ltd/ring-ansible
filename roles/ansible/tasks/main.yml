---

#### Ansible from pkgs

- name: Apt-pin ansible
  template:
    src: ansible.pref.j2
    dest: /etc/apt/preferences.d/ansible.pref
  when: ansible_distribution_release == "precise"

- name: "Delete apt-pin for ansible"
  file: path=/etc/apt/preferences.d/ansible.pref state=absent
  when: ansible_distribution_release != "precise"

- name: Ensure Ansible is installed
  apt:
    name: "{{ item }}"
    state: installed
  with_items:
    - git
    - python-requests
    - "ansible={{ ansible_pin_version }}"

- name: "Delete Ansible 1.0 plugin dir"
  file: path=/usr/share/ansible_plugins state=absent

- name: "Create callback plugin dir"
  file: path={{ item }} state=directory
  with_items:
    - /usr/share/ansible/plugins
    - /usr/share/ansible/plugins/callback

- name: "Install callback module"
  template: src=ring_callback.py.j2 dest=/usr/share/ansible/plugins/callback/ring.py

- name: "Check for virtual env (temp)"
  stat:
    path: /usr/share/ansible-venv
  register: stat_ansible

- name: "Remove old virtual environment (temp)"
  file: name={{ item }} state=absent
  with_items:
    - /usr/share/ansible-venv
  when: ansible_distribution_release == "xenial" and stat_ansible.stat.exists == True

#### END Ansible from pkgs

#### Ansible in a venv

- name: Install Ansible build-deps
  apt:
    name: "{{ item }}"
    state: present
  with_items:
    - 'libffi-dev'
    - 'python-virtualenv'
  when: ansible_distribution_release == "precise"

- name: Ensure Ansible is installed
  pip:
    name: "ansible"
    version: "{{ ansible_pip_version }}"
    state: present
    virtualenv: "{{ ansible_venv_dir }}"
    virtualenv_python: python2.7
  when: ansible_distribution_release == "precise"

- name: Install Ansible deps
  pip:
    name: "{{ item }}"
    state: present
    virtualenv: "{{ ansible_venv_dir }}"
    virtualenv_python: python2.7
  with_items:
    - 'requests'
  when: ansible_distribution_release == "precise"

- name: "Create callback plugin dir"
  file: path={{ item }} state=directory
  with_items:
    - "{{ ansible_venv_dir }}/lib/python2.7/site-packages/ansible/plugins"
    - "{{ ansible_venv_dir }}/lib/python2.7/site-packages/ansible/plugins/callback"
  when: ansible_distribution_release == "precise"

- name: "Install callback module"
  template:
    src: ring_callback.py.j2
    dest: "{{ ansible_venv_dir }}/lib/python2.7/site-packages/ansible/plugins/callback/ring.py"
  when: ansible_distribution_release == "precise"

#### END Ansible in a venv

- name: Ensure Ansible cronjob exists (venv)
  template:
    src: cron.d/ansible_virtualenv.j2
    dest: /etc/cron.d/ansible
  when: ansible_distribution_release == "precise"

- name: Ensure Ansible cronjob exists
  template:
    src: cron.d/ansible.j2
    dest: /etc/cron.d/ansible
  when: ansible_distribution_release != "precise"

- name: Ensure run-ansible script exists
  template:
    src: run-ansible.j2
    dest: /usr/local/sbin/run-ansible
    owner: root
    group: root
    mode: 0755
  when: ansible_distribution_release != "precise"

- name: "Delete ansible.j2 (temp)"
  file: path=/etc/cron.d/ansible.j2 state=absent

- name: Remove any old ansible crontab entries
  lineinfile:
    dest: /var/spool/cron/crontabs/root
    regexp: 'ansible(-|_)pull'
    state: absent

- name: Remove any old salt crontab entries
  lineinfile:
    dest: /var/spool/cron/crontabs/root
    regexp: 'salt-call'
    state: absent

- name: Remove old Puppet crontab entries
  lineinfile:
    dest: /var/spool/cron/crontabs/root
    regexp: "puppetagent|puppetd|zombiekiller|puppet_zombiecleanup|ring-puppet-repo-sync|pull_from_repo"
    state: absent
  when: remove_puppet is defined and remove_puppet

- name: Remove puppet
  apt:
    name: "{{ item }}"
    state: absent
    purge: yes
  with_items:
    - puppet
    - puppet-common
    - libaugeas-ruby1.8
    - libaugeas0
    - augeas-lenses
    - libruby
    - libshadow-ruby1.8
    - facter
  when: remove_puppet is defined and remove_puppet

- name: Remove puppet 'helper' files
  file:
    name: "{{ item }}"
    state: absent
  with_items:
    - /usr/local/bin/puppet_zombiecleanup
    - /usr/local/bin/ring-convert-ssh-keys
    - /usr/local/bin/ring-puppet-repo-sync
    - /var/lib/puppet
